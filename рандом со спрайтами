import pygame
import math
import random

# Инициализация pygame
pygame.init()

# Установка параметров окна и цветов
width, height = 200, 200
background_color = (255, 255, 255)
robot_color = (0, 0, 0)

# Создание окна
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption('slll')

# Создание класса для робота
class Robot(pygame.sprite.Sprite):
    def __init__(self, radius, position, angle, speed):
        super().__init__()
        self.radius = radius
        self.image = pygame.Surface((radius * 2, radius * 2), pygame.SRCALPHA)
        pygame.draw.circle(self.image, robot_color, (radius, radius), radius)
        self.rect = self.image.get_rect(center=position)
        self.position = position
        self.angle = angle
        self.speed = speed
        self.previous_positions = []

    def update(self):
        new_x = self.position[0] + self.speed * math.cos(math.radians(self.angle))
        new_y = self.position[1] + self.speed * math.sin(math.radians(self.angle))

        if new_x < 0 or new_x > width or new_y < 0 or new_y > height:
            self.angle = random.randint(0, 359)
        else:
            self.position = [new_x, new_y]
            self.previous_positions.append(self.position[:])

        self.rect.center = self.position

# Создание группы спрайтов
all_sprites = pygame.sprite.Group()

# Создание объекта робота
robot = Robot(10, [width / 2, height / 2], random.randint(0, 359), 1)
all_sprites.add(robot)

# Главный игровой цикл
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Фоновая заливка экрана
    screen.fill(background_color)

    # Обновление и отрисовка спрайтов
    all_sprites.update()
    all_sprites.draw(screen)

    # Отрисовка линии по предыдущим позициям
    for i in range(1, len(robot.previous_positions)):
        pygame.draw.aaline(screen, robot_color, (int(robot.previous_positions[i - 1][0]), int(robot.previous_positions[i - 1][1])),
                           (int(robot.previous_positions[i][0]), int(robot.previous_positions[i][1])))

    # Обновление экрана
    pygame.display.flip()

# Выход из игры
pygame.quit()

1. Инициализация Pygame и установка параметров окна: Мы начинаем с инициализации Pygame и установки параметров окна, таких как ширина, высота и цвет фона.

2. Создание класса для робота: Мы создаем класс `Robot`, который наследует от `pygame.sprite.Sprite`. В этом классе мы инициализируем атрибуты робота, такие как радиус, позиция, угол и скорость. Мы также создаем изображение робота в виде поверхности и определяем прямоугольник `rect`, который описывает положение спрайта на экране. Метод `update` обновляет позицию робота в соответствии с его текущим углом и скоростью.

3. Создание группы спрайтов: Мы создаем группу спрайтов с помощью `pygame.sprite.Group()`.

4. Создание объекта робота и добавление его в группу: Мы создаем объект `robot` с помощью класса `Robot` и добавляем его в группу `all_sprites`.

5. Главный игровой цикл: Мы запускаем основной игровой цикл, в котором обрабатываются события, происходит обновление и отрисовка спрайтов, а также отрисовка линий по предыдущим позициям робота.

6. Обработка событий и обновление экрана: Мы обрабатываем события, такие как нажатие кнопки закрытия окна, обновляем и отрисовываем спрайты, отрисовываем линии по предыдущим позициям и обновляем экран.

7. Выход из игры: По завершении игрового цикла происходит выход из игры и завершение работы Pygame.

Таким образом, программа создает робота в виде спрайта, добавляет его в группу спрайтов и управляет его движением и отрисовкой на экране.
