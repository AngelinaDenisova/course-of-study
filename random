import pygame
import math
import random

# Инициализация pygame
pygame.init()

# Установка параметров окна и цветов
width, height = 200, 200
background_color = (255, 255, 255)
robot_color = (0, 0, 0)

# Создание окна
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption('Случайное движение')

# Параметры робота
robot_radius = 10
robot_position = [width / 2, height / 2]
robot_angle = random.randint(0, 359)
robot_speed = 1  # Уменьшаем скорость для медленного движения
previous_positions = []  # Список для хранения предыдущих позиций
collision_count = 0  # Счетчик столкновений

# Главный игровой цикл
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Фоновая заливка экрана
    screen.fill(background_color)

    # Расчет новой позиции робота
    new_x = robot_position[0] + robot_speed * math.cos(math.radians(robot_angle))
    new_y = robot_position[1] + robot_speed * math.sin(math.radians(robot_angle))

    # Проверка на столкновение с границами окна
    if new_x < 0 or new_x > width or new_y < 0 or new_y > height:
        robot_angle = random.randint(0, 359)
        collision_count += 1
        if collision_count >= 30:  # Завершение алгоритма после 10 столкновений
            running = False
    else:
        robot_position = [new_x, new_y]

    # Добавляем текущую позицию в список предыдущих позиций
    previous_positions.append(robot_position[:])

    # Отрисовка робота и линии
    pygame.draw.circle(screen, robot_color, (int(robot_position[0]), int(robot_position[1])), robot_radius)

    # Отрисовка линии по предыдущим позициям
    for i in range(1, len(previous_positions)):
        pygame.draw.aaline(screen, robot_color, (int(previous_positions[i - 1][0]), int(previous_positions[i - 1][1])),
                           (int(previous_positions[i][0]), int(previous_positions[i][1])))

    # Обновление экрана
    pygame.display.flip()

# Выход из игры
pygame.quit()
